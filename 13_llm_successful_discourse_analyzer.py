import pandas as pd
import google.generativeai as genai
import os
import time

# Asumimos que config.py contiene: GEMINI_API_KEY
try:
    from config import GEMINI_API_KEY
except ImportError:
    print("‚ùå Error: Aseg√∫rate de que tu archivo 'config.py' existe y contiene la variable GEMINI_API_KEY.")
    exit()

# --- CONFIGURACI√ìN ---
INPUT_FILE = "output/b_top10_videos_likes.csv"
OUTPUT_FOLDER = "analisis_discurso_exitoso"

# --- INSTRUCCI√ìN MAESTRA (MASTER PROMPT) PARA AN√ÅLISIS ESTRAT√âGICO ---
# Esta instrucci√≥n est√° dise√±ada para que el LLM act√∫e como un estratega y
# destile las claves de la comunicaci√≥n efectiva.
MASTER_PROMPT = """
Act√∫a como un estratega de comunicaci√≥n pol√≠tica de √©lite. Te proporcionar√© el texto de los 10 videos de Instagram m√°s exitosos (con m√°s "me engagement") de un candidato presidencial de Colombia.

Tu misi√≥n es analizar este "corpus del √©xito" para destilar las claves de su comunicaci√≥n m√°s potente y efectiva. Genera un reporte de una p√°gina en Espa√±ol con la siguiente estructura:

**1. Resumen del Patr√≥n de √âxito:**
En un p√°rrafo, describe el patr√≥n o f√≥rmula general que define a sus videos m√°s exitosos. ¬øSe basan en la emoci√≥n, en datos duros, en la confrontaci√≥n, en la cercan√≠a?

**2. T√°cticas de Comunicaci√≥n Clave:**
Identifica de 3 a 4 t√°cticas o t√©cnicas de comunicaci√≥n espec√≠ficas que se repiten en este contenido. Por ejemplo:
    * **Narrativa Personal:** ¬øUsa historias personales o an√©cdotas para conectar?
    * **Contraste y Confrontaci√≥n:** ¬øDefine claramente a un "enemigo" o una idea opuesta?
    * **Apelaci√≥n a la Esperanza/Miedo:** ¬øQu√© emoci√≥n principal busca evocar?
    * **Llamados a la Acci√≥n Claros:** ¬øPide a su audiencia que haga algo espec√≠fico?

**3. Temas de Mayor Resonancia:**
Basado en este contenido, ¬øcu√°les son los temas espec√≠ficos que, en la voz de este candidato, generan la mayor interacci√≥n con su audiencia?

**4. Perfil de la Audiencia Impl√≠cita:**
A juzgar por el lenguaje y los temas de su contenido m√°s exitoso, ¬øa qu√© tipo de audiencia le est√° hablando principalmente? ¬øSon j√≥venes, indecisos, su base m√°s leal?

**5. Conclusi√≥n Estrat√©gica:**
¬øCu√°l es la clave fundamental del poder de su discurso? ¬øQu√© lo hace diferente o potente en comparaci√≥n con un discurso pol√≠tico tradicional?

---
Aqu√≠ est√° el texto de los videos m√°s exitosos del candidato:

{corpus_text}
"""

# --- FUNCI√ìN DE AN√ÅLISIS ---

def analyze_text_with_gemini(text_corpus, model_name='gemini-2.5-flash'):
    """Env√≠a el texto del corpus a Gemini y devuelve el reporte generado."""

    prompt = MASTER_PROMPT.format(corpus_text=text_corpus)

    try:
        model = genai.GenerativeModel(model_name)
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"  ‚ùå Error al contactar la API de Gemini: {e}")
        return "No se pudo generar el reporte debido a un error en la API."

# --- FUNCI√ìN PRINCIPAL ---

def main():
    """Orquesta el an√°lisis estrat√©gico de los videos m√°s exitosos."""

    print("üöÄ Iniciando el an√°lisis estrat√©gico del discurso de alto impacto...")

    # Configurar el API de Gemini
    try:
        genai.configure(api_key=GEMINI_API_KEY)
    except Exception as e:
        print(f"‚ùå Error configurando la API de Gemini. Revisa tu API Key. Error: {e}")
        return

    # Crear carpeta de salida
    if not os.path.exists(OUTPUT_FOLDER):
        os.makedirs(OUTPUT_FOLDER)
        print(f"üìÅ Carpeta '{OUTPUT_FOLDER}' creada.")

    # Cargar los datos de los videos m√°s exitosos
    try:
        df = pd.read_csv(INPUT_FILE)
    except FileNotFoundError:
        print(f"‚ùå No se encontr√≥ el archivo '{INPUT_FILE}'. Aseg√∫rate de que existe en la carpeta 'output'.")
        return

    # Agrupar por candidato
    grouped = df.groupby('username')

    print(f"üí¨ Se analizar√° el contenido exitoso de {len(grouped)} perfiles.")

    # Bucle de an√°lisis
    for candidate_name, group in grouped:
        print(f"\n--- Analizando a: {candidate_name} ---")

        # Crear el "corpus del √©xito"
        group['full_text'] = group['post_caption'].fillna('') + "\n\n" + group['post_transcript'].fillna('')
        corpus_of_success = "\n\n--- NUEVO VIDEO ---\n\n".join(group['full_text'])

        if not corpus_of_success.strip():
            print("  ‚ö†Ô∏è  No hay texto en las publicaciones de este candidato. Saltando...")
            continue

        # Llamar a Gemini para el an√°lisis estrat√©gico
        print("  ü§ñ Enviando corpus del √©xito a Gemini para an√°lisis estrat√©gico...")
        reporte_texto = analyze_text_with_gemini(corpus_of_success)

        # Guardar el reporte
        report_filename = f"analisis_exitoso_{candidate_name}.txt"
        report_filepath = os.path.join(OUTPUT_FOLDER, report_filename)
        with open(report_filepath, 'w', encoding='utf-8') as f_out:
            f_out.write(reporte_texto)

        print(f"  üìÑ Reporte estrat√©gico guardado en '{report_filepath}'")

        # Pausa para no exceder los l√≠mites de la API
        time.sleep(2)

    print(f"\nüéâ ¬°Proceso completado! Todos los an√°lisis est√°n en la carpeta '{OUTPUT_FOLDER}'.")

if __name__ == "__main__":
    main()